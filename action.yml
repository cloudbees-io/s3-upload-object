apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: upload-s3-object
inputs:
  file-path:  # id of input
    description: 'Local File Path'
    required: true
  bucket-name:  # id of input
    description: 'bucket name'
    required: true
  s3-path:  # id of input
    description: 's3 path containing object'
    required: true
  send-artifact-info: # id of input
    default: 'false'
    description: 'Send artifact information flag'
    required: true
  artifact-name:  # Optional input for artifact name
    description: 'Name of the artifact'
    required: false
  artifact-version:  # Optional input for artifact version
    description: 'Version of the artifact'
    required: false
  commit:
    description: >
      The commit ID from the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.sha }}
    required: false
  repository-url:
    description: >
        The clone URL of the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.repositoryUrl }}
    required: false
  ref:
    description: >
        The ref or branch of the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.ref }}
    required: false

outputs:
  artifact-id:
    value: ${{ steps.s3-action-upload.outputs.artifact-id }}
    description: "The unique identifier of the artifact."
runs:
  using: composite
  steps:
    - id: s3-action-upload
      name: s3-action-upload
      uses: docker://amazon/aws-cli
      shell: bash
      env:
        CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
        CLOUDBEES_API_TOKEN: ${{ cloudbees.api.token }}
        RUN_ID: ${{ cloudbees.run_id }}
        RUN_ATTEMPT: ${{ cloudbees.run_attempt }}
      run: |
        set -x

        bucketname="${{ inputs.bucket-name }}"
        s3path="${{ inputs.s3-path }}"

        s3uri="$bucketname"

        # if bucketname does not have s3:// prefix 
        if [[ $bucketname != s3://* ]]; then
           bucketname="s3://$bucketname"
        fi 

        #if s3path does not start with /
        if [[ $s3path != /* ]]; then
           s3path="/$s3path"
        fi 
        
        # final s3url
        s3uri="$bucketname$s3path"

        echo $s3uri

        # Determine if the input is a file or directory
        if [ ! -f "${{ inputs.file-path }}" ] && [ ! -d "${{ inputs.file-path }}" ]; then
          echo "Invalid path: ${{ inputs.file-path }} does not exist."
          exit 1
        fi

        # File or directory upload logic
        if [ -f "${{ inputs.file-path }}" ]; then
          file_name=$(basename "${{ inputs.file-path }}")
          file_type="file"
          aws s3 cp ${{ inputs.file-path }} $s3uri | tee "${{cloudbees.workspace}}/aws_response.txt"
          etag=$(aws s3api head-object --bucket ${{ inputs.bucket-name }} --key ${{ inputs.s3-path }} --query 'ETag' --output text)
        elif [ -d "${{ inputs.file-path }}" ]; then
          file_name=$(basename "${{ inputs.file-path }}")
          file_type="folder"
          aws s3 cp ${{ inputs.file-path }} $s3uri --recursive | tee "${{cloudbees.workspace}}/aws_response.txt"
        fi 
        grep upload: "${{cloudbees.workspace}}/aws_response.txt" | sed 's/.*upload: //' | awk '{print "| " $1 " | " $3 " |"}' | tee "$CLOUDBEES_OUTPUTS/s3_upload_evidence"

        # Determine the artifact name: use provided artifact name or fallback to file name
        artifact_name="${{ inputs.artifact-name }}"
        if [ -z "$artifact_name" ]; then
          artifact_name="$file_name"
        fi

        # Handle Artifact API call only if `send-artifact-info` is true
        if [[ "${{ inputs.send-artifact-info }}" == "true" ]]; then
          # Prepare API payload
          imgName="$artifact_name"
          imgVer="${{ inputs.artifact-version }}"
          if [ -z "$imgVer" ]; then
            imgVer="-"
          fi

          artifact_type="file"
          if [ "$file_type" == "folder" ]; then
            artifact_type="folder"
          fi

          destination="$s3uri"
        
          commit="${{ inputs.commit }}"
          repository_url="${{ inputs.repository-url }}"
          ref="${{ inputs.ref }}"
        
          echo "Publishing build artifact information"

          # Construct the basic JSON payload
          json_payload='{
            "runId": "'"$RUN_ID"'",
            "runAttempt": '"$RUN_ATTEMPT"',
            "name": "'"$imgName"'",
            "version": "'"$imgVer"'",
            "url": "'"$destination"'",
            "type": "'"$artifact_type"'",
            "commit": {
              "repositoryUrl": "'"$repository_url"'",
              "commitId": "'"$commit"'",
              "ref": "'"$ref"'"
            }}'

          # If $etag is not empty, add the "digest" field directly to the JSON
         if [[ -n "$etag" ]]; then
           json_payload=$(echo "$json_payload" | sed "s/}}$/},\n  \"digest\": \"${etag//\"/}\" \n}/")
         fi

          # API call to publish artifact info
          response=$(curl --retry-delay 5 --retry 3 --retry-connrefused --fail-with-body -X 'POST' "$CLOUDBEES_API_URL/v3/artifactinfos" \
            -H "Authorization: Bearer $CLOUDBEES_API_TOKEN" \
            -H 'Content-Type: application/json' \
            --data-binary "$json_payload") || command_failed=1

          # Check curl exit code
          if [ ${command_failed:-0} -eq 1 ]; then
            echo "ERROR: failed to save artifact information: '$response'"
            exit 1
          else
            echo "Artifact details pushed to CloudBees platform successfully"
            
            # Extract the artifactId
            id=$(echo "$response" | grep -o '"id": *"[^"]*"' | sed 's/.*"id": *"\([^"]*\)".*/\1/')
          
            # Set it as an output
            printf %s "$id" > $CLOUDBEES_OUTPUTS/artifact-id
          fi
        else
          echo "Artifact information not sent to CloudBees platform"
          # Output an empty artifact-id output parameter when 
          # no artifact version info is registered with CloudBees platform
          echo "" > $CLOUDBEES_OUTPUTS/artifact-id
        fi    
    - name: publish-evidence
      uses: cloudbees-io/publish-evidence-item@v1
      with:
        content: |-
          # S3 Upload results
          | Local file | S3 |
          | ---- | ---- |         
          ${{ steps.s3-action-upload.outputs.s3_upload_evidence }}

